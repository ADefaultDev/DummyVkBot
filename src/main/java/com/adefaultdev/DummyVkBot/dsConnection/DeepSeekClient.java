package com.adefaultdev.DummyVkBot.dsConnection;

import org.openqa.selenium.*;
import org.openqa.selenium.support.ui.*;
import java.time.Duration;
import java.util.List;

/**
 * Getting message from VK
 * Generates answer with DeepSeek and sends it back
 */
public class DeepSeekClient {

    private final WebDriver driver;
    private final WebDriverWait wait;

    public DeepSeekClient(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(30));
    }

    /**
     * Creating DeepSeek client
     * @param url - URL of DeepSeek site
     */
    public void setup(String url) {

        System.out.println("DeepSeek client is up. URL: " + url);

        try {

            JavascriptExecutor js = (JavascriptExecutor) driver; // This block used to bypass cloudflare
            js.executeScript("Object.defineProperty(navigator, 'webdriver', {get: () => undefined});");
            js.executeScript("window.navigator.chrome = {runtime: {}, etc: {}};");

            driver.get(url);

            Thread.sleep(5000);

            wait.until(ExpectedConditions.numberOfWindowsToBe(2));

            String originalWindow = driver.getWindowHandle();
            for (String windowHandle : driver.getWindowHandles()) {
                if (!windowHandle.equals(originalWindow)) {
                    driver.switchTo().window(windowHandle);
                    break;
                }
            }

            try {
                wait.until(ExpectedConditions.presenceOfElementLocated(
                        By.cssSelector("textarea[placeholder='Message DeepSeek']")
                ));
                System.out.println("[DeepSeek] Chat is loaded successfully.");
            } catch (TimeoutException e) {
                System.out.println("[DeepSeek ERROR] Unable to log in or accessing the chat");
                throw e;
            }

            driver.switchTo().window(originalWindow);

        } catch (Exception e) {
            System.out.println("[DeepSeek ERROR] " + e.getMessage());
            cleanupTabs();
        }
    }

    /**
     * Sends message to DeepSeek and getting a response
     * @param message - message from VK
     * @return - response from DeepSeek(null if error occur)
     */
    public String sendMessageAndGetResponse(String message) {
        try {

            String vkTab = driver.getWindowHandle();
            String deepSeekTab = driver.getWindowHandles()
                    .stream()
                    .filter(tab -> !tab.equals(vkTab))
                    .findFirst()
                    .orElseThrow(() -> new RuntimeException("No DeepSeek window found!"));

            driver.switchTo().window(deepSeekTab);

            WebElement chatInput = wait.until(
                    ExpectedConditions.elementToBeClickable(
                            By.cssSelector("textarea[placeholder='Message DeepSeek']")
                    )
            );
            chatInput.sendKeys(message);

            WebElement sendButton = wait.until(
                    ExpectedConditions.elementToBeClickable(
                            By.cssSelector("div[role='button'][aria-disabled='false']")
                    )
            );
            sendButton.click();

            String response = waitForResponse();

            driver.switchTo().window(vkTab);
            return response;

        } catch (Exception e) {
            System.out.println("[DeepSeek ERROR] " + e.getMessage());
            return null;
        }
    }

    private void cleanupTabs() {
        try {
            String mainWindow = driver.getWindowHandles().iterator().next();
            for (String handle : driver.getWindowHandles()) {
                if (!handle.equals(mainWindow)) {
                    driver.switchTo().window(handle).close();
                }
            }
            driver.switchTo().window(mainWindow);
        } catch (Exception e) {
            System.out.println("[DeepSeek ERROR] tabs cleanup  " + e.getMessage());
        }
    }


    /**
     * Awaiting answer from DeepSeek
     * @return - message generated by DeepSeek
     */
    private String waitForResponse() {
        try {

            wait.until(d ->
                    driver.findElements(
                            By.xpath("//div[@class='_7436101']//div[@class='_480132b']")
                    ).isEmpty()
            );


            List<WebElement> allResponseBlocks = wait.until(
                    ExpectedConditions.presenceOfAllElementsLocatedBy(
                            By.cssSelector("div.ds-markdown--block")
                    )
            );

            if (allResponseBlocks.isEmpty()) {
                System.out.println("[WARN] No answer found");
                return null;
            }

            WebElement lastResponseBlock = allResponseBlocks.get(allResponseBlocks.size() - 1);

            String response = (String) ((JavascriptExecutor)driver).executeScript(
                    "return arguments[0].innerText",
                    lastResponseBlock
            );

            response = response.replaceAll("[\\p{So}\\p{Cn}]", "")
                    .replaceAll("\\s+", " ")
                    .trim();

            System.out.println("[DeepSeek] The last generated answer: " + response);
            return response;

        } catch (TimeoutException e) {
            System.out.println("[TIMEOUT] No answer received");
            return null;
        } catch (Exception e) {
            System.out.println("[DeepSeek ERROR] Error during receiving an answer: " + e.getMessage());
            return null;
        }
    }

}